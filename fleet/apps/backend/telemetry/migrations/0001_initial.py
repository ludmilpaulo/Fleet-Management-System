# Generated by Django 5.2.7 on 2025-10-10 23:11

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fleet_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Geofence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('DEPOT', 'Depot'), ('CUSTOMER', 'Customer Location'), ('RESTRICTED', 'Restricted Area'), ('PARKING', 'Parking Area'), ('OTHER', 'Other')], default='OTHER', max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended')], default='ACTIVE', max_length=20)),
                ('center_lat', models.FloatField()),
                ('center_lng', models.FloatField()),
                ('radius', models.FloatField(help_text='Radius in meters')),
                ('alert_on_entry', models.BooleanField(default=False)),
                ('alert_on_exit', models.BooleanField(default=False)),
                ('restrict_entry', models.BooleanField(default=False)),
                ('restrict_exit', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('ASSIGN', 'Assign'), ('INSPECT', 'Inspect'), ('UPLOAD', 'Upload')], max_length=10)),
                ('entity', models.CharField(max_length=50)),
                ('entity_id', models.IntegerField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['actor', 'created_at'], name='telemetry_a_actor_i_51a74b_idx'), models.Index(fields=['entity', 'entity_id'], name='telemetry_a_entity_4c1107_idx'), models.Index(fields=['created_at'], name='telemetry_a_created_1c061f_idx')],
            },
        ),
        migrations.CreateModel(
            name='GeofenceEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('ENTRY', 'Entry'), ('EXIT', 'Exit')], max_length=5)),
                ('lat', models.FloatField()),
                ('lng', models.FloatField()),
                ('occurred_at', models.DateTimeField(auto_now_add=True)),
                ('geofence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='telemetry.geofence')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geofence_events', to='fleet_app.vehicle')),
            ],
            options={
                'ordering': ['-occurred_at'],
                'indexes': [models.Index(fields=['vehicle', 'occurred_at'], name='telemetry_g_vehicle_b08d73_idx'), models.Index(fields=['geofence', 'occurred_at'], name='telemetry_g_geofenc_cd65fc_idx')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('INSPECTION_FAILED', 'Inspection Failed'), ('TICKET_ASSIGNED', 'Ticket Assigned'), ('TICKET_OVERDUE', 'Ticket Overdue'), ('SHIFT_STARTED', 'Shift Started'), ('SHIFT_ENDED', 'Shift Ended'), ('MAINTENANCE_DUE', 'Maintenance Due'), ('VEHICLE_LOCATION', 'Vehicle Location'), ('SYSTEM_ALERT', 'System Alert'), ('OTHER', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SENT', 'Sent'), ('DELIVERED', 'Delivered'), ('FAILED', 'Failed'), ('READ', 'Read')], default='PENDING', max_length=10)),
                ('payload', models.JSONField(blank=True, default=dict)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='fleet_app.vehicle')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='telemetry_n_user_id_7d5f3b_idx'), models.Index(fields=['type', 'priority'], name='telemetry_n_type_ef886c_idx'), models.Index(fields=['created_at'], name='telemetry_n_created_6b986d_idx')],
            },
        ),
        migrations.CreateModel(
            name='ParkingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField()),
                ('lng', models.FloatField()),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('captured_at', models.DateTimeField(auto_now_add=True)),
                ('shift', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='telemetry_parking_logs', to='fleet_app.shift')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parking_logs', to='fleet_app.vehicle')),
            ],
            options={
                'ordering': ['-captured_at'],
                'indexes': [models.Index(fields=['vehicle', 'captured_at'], name='telemetry_p_vehicle_52d6ac_idx'), models.Index(fields=['captured_at'], name='telemetry_p_capture_0736f4_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('SYSTEM_ERROR', 'System Error'), ('PERFORMANCE', 'Performance Issue'), ('SECURITY', 'Security Alert'), ('MAINTENANCE', 'Maintenance Required'), ('BACKUP', 'Backup Status'), ('LICENSE', 'License Issue'), ('OTHER', 'Other')], max_length=20)),
                ('severity', models.CharField(choices=[('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('ACKNOWLEDGED', 'Acknowledged'), ('RESOLVED', 'Resolved'), ('SUPPRESSED', 'Suppressed')], default='ACTIVE', max_length=20)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['type', 'severity'], name='telemetry_s_type_2429f0_idx'), models.Index(fields=['status', 'created_at'], name='telemetry_s_status_8a74b3_idx')],
            },
        ),
        migrations.CreateModel(
            name='VehicleLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField()),
                ('lng', models.FloatField()),
                ('address', models.TextField(blank=True)),
                ('accuracy', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('speed', models.FloatField(blank=True, help_text='Speed in km/h', null=True)),
                ('heading', models.FloatField(blank=True, help_text='Heading in degrees', null=True)),
                ('altitude', models.FloatField(blank=True, help_text='Altitude in meters', null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='fleet_app.vehicle')),
            ],
            options={
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['vehicle', 'recorded_at'], name='telemetry_v_vehicle_c547d9_idx'), models.Index(fields=['recorded_at'], name='telemetry_v_recorde_973544_idx')],
            },
        ),
        migrations.CreateModel(
            name='VehicleTelemetry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engine_rpm', models.PositiveIntegerField(blank=True, null=True)),
                ('engine_temp', models.FloatField(blank=True, help_text='Engine temperature in Celsius', null=True)),
                ('coolant_temp', models.FloatField(blank=True, help_text='Coolant temperature in Celsius', null=True)),
                ('fuel_level', models.FloatField(blank=True, help_text='Fuel level percentage', null=True)),
                ('fuel_consumption', models.FloatField(blank=True, help_text='Fuel consumption in L/100km', null=True)),
                ('odometer', models.PositiveIntegerField(blank=True, help_text='Odometer reading in km', null=True)),
                ('speed', models.FloatField(blank=True, help_text='Speed in km/h', null=True)),
                ('battery_voltage', models.FloatField(blank=True, help_text='Battery voltage', null=True)),
                ('diagnostic_codes', models.JSONField(blank=True, default=list, help_text='OBD diagnostic codes')),
                ('check_engine_light', models.BooleanField(default=False)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemetry', to='fleet_app.vehicle')),
            ],
            options={
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['vehicle', 'recorded_at'], name='telemetry_v_vehicle_22f177_idx'), models.Index(fields=['recorded_at'], name='telemetry_v_recorde_0a9e66_idx')],
            },
        ),
    ]
